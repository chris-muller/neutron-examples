/*---------------------------------
           NeutronCSS
---------------------------------*/

// Configuration
//-------------------------------------
@import "config";

// Settings Management
//-------------------------------------

$_neutron: (
	layout: $neutron_layout,
	query: $neutron_query,
	color: $neutron_color,
	colour: $neutron_color,
	text: $neutron_text
);

@function setting($map_name: "", $setting: "") {
	@if $map_name != "" and $setting != "" {
		$map: map-get($_neutron,$map_name);
		@return map-get($map, $setting);
	}
}

// Modules
//-------------------------------------
@import "modules/normalise";
@import "modules/grid";
@import "modules/queries";
@import "modules/utilities";
@import "modules/typography";
@import "modules/buttons";
@import "modules/forms";
@import "modules/lists";
@import "modules/links";
@import "modules/code";
@import "modules/tables";

// Helper Functions
//-------------------------------------

//Adds all items in a list and returns the result
@function sum($list) {
	
	$total: 0;
	@each $element in $list {
		$total: $total + $element;
	}
	@return $total;
	
}

//Adds block element self clearing
@mixin clear-fix() {

	&:after {
		content: "";
		display: table;
		clear: both;
	}

}

@function strip-units($number) {
	@return $number / ($number * 0 + 1);
}

@function extract-position($shorthand, $position) {
	$shorthand-length: length($shorthand);
	
	//if only one variable passed, return it
	@if $shorthand-length == 1 {
		@return $shorthand;
	}
	
	@if $shorthand-length == 2 {
		@if $position == top or $position == bottom {
			@return nth($shorthand, 1);
		}
		
		@if $position == left or $position == right {
			@return nth($shorthand, 2);
		}
	}

	@if $shorthand-length == 3 {
		@if $position == top {
			@return nth($shorthand, 1);
		}

		@if $position == left or $position == right {
			@return nth($shorthand, 2);
		}

		@if $position == bottom {
			@return nth($shorthand, 3);
		}
	}

	@if $shorthand-length == 4 {
		@if $position == top {
			@return nth($shorthand, 1);
		}

		@if $position == right {
			@return nth($shorthand, 2);
		}

		@if $position == bottom {
			@return nth($shorthand, 3);
		}

		@if $position == left {
			@return nth($shorthand, 4);
		}
	}
}

@function slice($list, $start: 1, $end: length($list)) {
	$result: null;
	          
	@if type-of($start) != number or type-of($end) != number {
		@warn "Either $start or $end are not a number for `slice`.";
	}
	         
	@else if $start > $end {
		@warn "The start index has to be lesser than or equals to the end index for `slice`.";
	}
	
	@else if $start < 1 or $end < 1 {
		@warn "List indexes must be non-zero integers for `slice`.";
	}
	
	@else if $start > length($list) {
		@warn "List index is #{$start} but list is only #{length($list)} item long for `slice`.";
	}
	         
	@else if $end > length($list) {
		@warn "List index is #{$end} but list is only #{length($list)} item long for `slice`.";
	}
	
	@else {
		$result: ();
		            
		@for $i from $start through $end {
		  $result: append($result, nth($list, $i));
		}
	}
	
	@return $result;
}


// Required Styles
//-------------------------------------

// Set root element to use border-box 
// sizing and set all elements on the page
// to inherit border-box sizing. 
//
// html is set to 62.5% so that all the REM 
// measurements are based on 10px sizing. 
// So basically 1.5rem = 15px

html {
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}

html * {
	-moz-box-sizing: inherit;
	box-sizing: inherit;
}

body {
	max-width: setting("layout", "container-max-width");
	margin-left: auto;
	margin-right: auto;
}

